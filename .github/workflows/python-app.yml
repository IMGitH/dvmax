name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug mode for pytest (adds -vv and DEBUG logs)'
        required: false
        default: 'true'
      coverage_threshold:
        description: 'Minimum acceptable test coverage % (fail if lower)'
        required: false
        default: '85'

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  build:
    runs-on: ubuntu-latest
    environment: dvmax-env

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          pip-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
          pip-

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check notebooks for output cells
      run: |
        for nb in *.ipynb; do
          if [ -f "$nb" ]; then
            if jq '.cells[]?.outputs? | length > 0' "$nb" | grep true; then
              echo "::error file=$nb::Notebook contains output cells. Please clear outputs before committing."
              exit 1
            fi
          fi
        done

    - name: Test with pytest + coverage
      env:
        FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
        PYTHONPATH: .
      run: |
        THRESHOLD=${{ github.event.inputs.coverage_threshold || '85' }}
        if [[ "${{ github.event.inputs.debug }}" == "true" ]]; then
          echo "Running pytest in debug mode with coverage..."
          pytest -vv -s --log-cli-level=DEBUG --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=$THRESHOLD
        else
          echo "Running pytest in normal mode with coverage..."
          pytest --cov=src --cov-report=term-missing --cov-report=xml --cov-fail-under=$THRESHOLD
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

    - name: Save HTML coverage report (optional)
      if: always()
      env:
        FMP_API_KEY: ${{ secrets.FMP_API_KEY }}
        PYTHONPATH: .
      run: |
        mkdir -p htmlcov
        pytest --cov=src --cov-report=html
      continue-on-error: true

    - name: Upload HTML report artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: htmlcov/
